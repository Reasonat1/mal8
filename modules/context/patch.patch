diff --git a/context.install b/context.install
index 62da549..67ea2cb 100644
--- a/context.install
+++ b/context.install
@@ -1,12 +1,19 @@
 <?php
 
 /**
+ * @file
+ * Install, update and uninstall functions for the context module.
+ */
+
+use Drupal\context\Plugin\ContextReaction\Blocks;
+
+/**
  * Update all blocks reaction configuration with additional "context_id" property.
  */
 function context_update_8001() {
   foreach (Drupal::service('context.manager')->getContexts() as $context) {
     foreach ($context->getReactions() as $reaction) {
-      if ($reaction instanceof Drupal\context\Plugin\ContextReaction\Blocks) {
+      if ($reaction instanceof Blocks) {
         foreach ($reaction->getBlocks() as $block) {
           $config = $block->getConfiguration();
           if (!isset($config['context_id'])) {
@@ -41,3 +48,23 @@ function context_update_8002() {
     }
   }
 }
+
+/**
+ * Add default "custom_id" property to all blocks reactions.
+ */
+function context_update_8003() {
+  foreach (Drupal::service('context.manager')->getContexts() as $context) {
+    foreach ($context->getReactions() as $reaction) {
+      if ($reaction instanceof Blocks) {
+        foreach ($reaction->getBlocks() as $block) {
+          $config = $block->getConfiguration();
+          if (!isset($config['custom_id'])) {
+            $config['custom_id'] = preg_replace("/\W+/", "_", $config['id']);
+            $block->setConfiguration($config);
+            $context->save();
+          }
+        }
+      }
+    }
+  }
+}
diff --git a/src/Plugin/ContextReaction/Blocks.php b/src/Plugin/ContextReaction/Blocks.php
index 1f72a02..0d8a05e 100644
--- a/src/Plugin/ContextReaction/Blocks.php
+++ b/src/Plugin/ContextReaction/Blocks.php
@@ -198,6 +198,7 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
           '#plugin_id' => $block->getPluginId(),
           '#base_plugin_id' => $block->getBaseId(),
           '#derivative_plugin_id' => $block->getDerivativeId(),
+          '#id' => $block->getConfiguration()['custom_id'],
           '#block_plugin' => $block,
           '#pre_render' => [[$this, 'preRenderBlock']],
           '#cache' => [
diff --git a/src/Reaction/Blocks/Form/BlockFormBase.php b/src/Reaction/Blocks/Form/BlockFormBase.php
index c8738fd..b925993 100644
--- a/src/Reaction/Blocks/Form/BlockFormBase.php
+++ b/src/Reaction/Blocks/Form/BlockFormBase.php
@@ -200,6 +200,17 @@ abstract class BlockFormBase extends FormBase {
       '#value' => $this->block->getPluginId(),
     ];
 
+    $form['custom_id'] = [
+      '#type' => 'machine_name',
+      '#maxlength' => 64,
+      '#description' => $this->t('A unique name for this block instance. Must be alpha-numeric and underscore separated.'),
+      '#default_value' => isset($configuration['custom_id']) ? $configuration['custom_id'] : preg_replace("/\W+/", "_", $this->block->getPluginId()),
+      '#machine_name' => [
+        'source' => ['settings', 'label'],
+      ],
+      '#required' => TRUE,
+    ];
+
     $form['region'] = [
       '#type' => 'select',
       '#title' => $this->t('Region'),
@@ -270,6 +281,7 @@ abstract class BlockFormBase extends FormBase {
     }
 
     $configuration = array_merge($this->block->getConfiguration(), [
+      'custom_id' => $form_state->getValue('custom_id'),
       'region' => $form_state->getValue('region'),
       'theme' => $form_state->getValue('theme'),
       'css_class' => $form_state->getValue('css_class'),
